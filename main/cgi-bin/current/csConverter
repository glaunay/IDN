#!/usr/bin/perl
use strict;
use vars qw/$DB $URL %EQUIV/;

use warnings;
use diagnostics;

use lib ("$ENV{ IDN_LIB }/perl");

#from CPAN
use CGI;
use Data::UUID;
use JSON;
use Data::Dumper;
use Log::Log4perl qw(get_logger :levels);
#custom

use common;


Log::Log4perl->init("$ENV{ IDN_CONF }/csConverter.conf");
my $logger = get_logger(); 

$logger->info("*** CGI activation at " . common::getTime());

# retrieving get parameters
my $query = CGI->new();
my %params = $query->Vars;

my $ug  = new Data::UUID;
my $uuid = $ug->create();
my $tag = $ug->to_string( $uuid );


#`mkdir ../../html/tmp/cs_$tag`;
`mkdir $ENV{ IDN_TMP }/cs_$tag`;

$logger->info($params{'POSTDATA'});
my $mainContainer = decode_json($params{'POSTDATA'});
#$logger->info(Dumper($mainContainer));
foreach my $key (keys (%{$mainContainer}))  {
    $logger->info("$key\n");
}

my $naString = "Common_Name (class=java.lang.String)\n";
my $sifString = '';

$logger->info(Dumper($mainContainer));

foreach my $link (@{$mainContainer->{ linksData }}) {
  my @names;
  
  my $sName = $link->{ source };
  my $sNode = $mainContainer->{ nodeData }->{ $sName };
  my $tName = $link->{ target };
  my $tNode = $mainContainer->{ nodeData }->{ $tName };
  my $a = getCode($sNode->{ type });
  my $b = getCode($tNode->{ type });
  $sifString .= $sName . " $a$b " . $tName . "\n";
}

foreach my $nodeName (keys (%{$mainContainer->{ nodeData }}) ) {
  my $node = $mainContainer->{ nodeData }->{ $nodeName };
  defined($node->{ common }) || next;
  $naString .= "$nodeName = $node->{ common }\n";
}

open SIF, ">$ENV{ IDN_TMP }/cs_$tag/network.sif" or die $!;
print SIF "$sifString";
close SIF;

open NAF, ">$ENV{ IDN_TMP }/cs_$tag/network.na" or die $!;
print NAF "$naString";
close NAF;

#`cd $ENV{ IDN_TMP };tar -cjf cs_$tag.tar.bz cs_$tag`;
`cd $ENV{ IDN_TMP };zip -r cs_$tag.zip cs_$tag`;

my $response;
$response = {
    status => 'OK',
    fileLocation => "$ENV{ IDN_URL }/tmp/cs_$tag.zip"
#    fileLocation => "$ENV{ IDN_URL }/tmp/cs_$tag.tar.bz" # put relative url here
};

print $query->header('application/json');      # create the HTTP header
print encode_json ($response);


sub getCode {
  my $type = shift;
  
  my $code = {
	      "protein" => "p",
	      "fragment" => "f",
	      "multimer" => "m",
	      "glycosaminoglycan" => "g",
	      "lipid" => "l",
	      "cation" => "c" 
	     };
  
  return defined ($code->{ $type }) ? $code->{ $type } : "x";
}
