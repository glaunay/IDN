#!/usr/bin/perl
use strict;
use warnings;

use lib qw("$ENV{ IDN_LIB }/perl");

use CGI;
use Ace 1.51;
use JSON;
use Data::Dumper;
use Log::Log4perl qw(get_logger :levels);
use CHI;
=pod GL - 2014 02 14
  'CGI script that performs the users search in matrixdb'
  'all searches are cached in using searched string as key and a stringified json representation of the result as value'
=cut

#MD 09/10/2015 : suppression des caches - inutile (peu de gain de temps) et pb de compatibilitÃ© avec CentOS 7

our $MAX_HITS = 200;

Log::Log4perl->init("$ENV{ IDN_CONF }/barSearch.conf");
my $logger = get_logger();
our $DB = Ace->connect(-host  => 'localhost', -port  => 55555)  || AceError ("Couldn't open database");

my $query = CGI->new();

#my ($string) = $query->{ key }->[0] =~ /^([^\?]+)?/;
my ($string) = $query->{"param"}->{"key"}->[0] =~ /^([^\?]+)?/;
$logger->info("search key is \"$string\"\n");

my $specieRef = indexingSpecies($DB);
$logger->trace(Dumper($specieRef));
my $dataContainer ; 

$DB->raw_query("grep " . $string);
$DB->raw_query("kstore allMatch");
$dataContainer = {
		  searchString => $string,
		  results => {
			      biomolecule => getBiomolecule($string, $specieRef),
			      author => getAuthor($string),
			      publication => getPublication($string),
			      keywrd => getKeywrd($string)
			     }
		   };
$logger->trace(Dumper($dataContainer));

my $jsonString = encode_json($dataContainer);


#open JSOUT, ">/tmp/searchDevl.json";
#print JSOUT "callback($jsonString);";
#close JSOUT;

print $query->header('application/json');      # create the HTTP header
print $jsonString;

$DB->close();
exit;

sub getBiomolecule {
  my $string = shift;
  my $specieIndex = shift;

  my @array;
  $DB->raw_query("kget allMatch");
  $DB->raw_query("query CLASS biomolecule");
  my $cHit = $DB->count(-query=> '*');
  
  $logger->warn("Current newt count " . $cHit);
  if ($cHit > $MAX_HITS) { # If total biomoecule exceeds limit, only keep 
    # those featuring at least one association
    $DB->raw_query("query Association");
  }
  my $biomoleculeAceObjIt = $DB->fetch_many(-query=> '*');
  my $cnt  = 0;
  while (my $biomoleculeObj = $biomoleculeAceObjIt->next ) {
    $cnt++;
    ($cnt > $MAX_HITS) && last;
    my @buffer = $biomoleculeObj->Association;
    my $datum = { id => $biomoleculeObj->name,
		  name => undef,
		  specie => { taxon =>  undef,
			      name => undef
			    },
		  geneName => [],
		  count => scalar(@buffer)
		};
    if (defined($biomoleculeObj->In_Species)) {
      $datum->{ specie }->{ taxon } = $biomoleculeObj->In_Species->name;
      $datum->{ specie }->{ name } = $specieIndex->{ $biomoleculeObj->In_Species->name };
    }
    foreach my $tagName (qw /Common_Name
			      GAG_Name Phospholipid_Name Cation_Name Glycolipid_Name 
			      Multimer_Name Inorganic_Name FragmentName EntryName
			      More_Info Other_Fragment_Name Spep_Name Spep_ShortName/) {
      my $tag = $biomoleculeObj->$tagName;
      if (defined ($tag)) {
	$datum->{ name } = $tag->name;
	last;
      }
    }
    if (defined($biomoleculeObj->GeneName)){
      $datum->{ geneName } = [$biomoleculeObj->GeneName->name];
      my @addSyn = $biomoleculeObj->Synonym;
      push @{ $datum->{ geneName } }, map { $_->name } @addSyn;
    }
    push @array, $datum;
  }
  $logger->warn(Dumper(\@array));
  return \@array;
}

sub getAuthor {
   my $string = shift;
   my $cHit = 0;
   $DB->raw_query("kget allMatch");
   $DB->raw_query("query CLASS Author");
   
   my @array;
   my $r = $DB->raw_query("show");
   #$logger->info($r);
   foreach my $line (split /\n/, $r) {
     if ($line =~ /^Author ([\S]+.+[\S]+)/) {
       $cHit++;
       ($cHit > $MAX_HITS) && last;
       push @array, { id => $1, Published => [], count => 0 };
     }
     elsif ($line =~ /^\s+Published\s+(\d+)/){
       push @{ $array[$#array]->{ Published } }, $1;
     }
     elsif ($line =~ /^[\s]+([\d]+)/) {
         push @{ $array[$#array]->{ Published } }, $1;
	  }
   }
   foreach my $author (@array) {
     my $req = "find Author \"" . $author->{ id } . "\"";
     $r = $DB->raw_query($req);
     $r = $DB->raw_query("follow Published");
     $r = $DB->raw_query("follow Association");
     if ($r =~ /([\d]+) Active Objects/) {
        $author->{ count } = $1;
      }
     $logger->trace($author->{ id } . " ==> " . $author->{ count });
   }

   return \@array;
}

sub getKeywrd {
   my $string = shift;
   my $cHit = 0;
   $DB->raw_query("kget allMatch");
   $DB->raw_query("query CLASS Keywrd");

   my @array;
   my $r = $DB->raw_query("show");
   foreach my $line (split /\n/, $r) {
     if ($line =~ /^Keywrd ([\S]+)/) {
       $cHit++;
       ($cHit > $MAX_HITS) && last;
       my $tmpHash = {id => $1, name => undef, count => 0};
      # $DB->raw_query("query find Biomolecule where Keywrd = $tmpHash->{ id }");
      # my $rSub = $DB->raw_query("follow Association");
      # if ($rSub =~ /Found ([\d]+) objects/) {
      #	 $tmpHash->{ count } = $1;
      # }
       push @array, $tmpHash;
     }
     elsif ($line =~ /^[\s]+Identifier[\s]+([\S]+.+[\S]+)/){
       $array[$#array]->{ name } = $1;
     }
   }
   $logger->trace(Dumper(@array));
   return \@array;
}

sub getPublication {
  my $string = shift;
  my $cHit = 0;
  my @array;

  $DB->raw_query("kget allMatch");
  $DB->raw_query("query CLASS publication");
  $DB->raw_query("query association"); # limit the publications to those carrying an Association tag
  my $pmidAceObjIt = $DB->fetch_many(-query=> '*');
  while (my $pmidObj = $pmidAceObjIt->next ) {
    $cHit++;
    ($cHit > $MAX_HITS) && last;
    my @buffer = $pmidObj->Association;
    push @array, { id => $pmidObj->name, 
		   Title => defined ($pmidObj->Title) ? $pmidObj->Title->name : undef,
		   imexID => defined ($pmidObj->IMEx_ID) ? $pmidObj->IMEx_ID->name : undef,
		   count => scalar(@buffer)
		 };
  }
# HOT FIX IMEX_ID is of type Text (not?Text) and cant be greped, it seems
  if ($string =~ /[\d]+$/) {
      $DB->raw_query('query find experiment matrixdb where IMEx_ID_Experiment=*' . $string . '*');
      $DB->raw_query('follow PMID');
      #$DB->raw_query('query find Publication where IMEX_ID=*' . $string . '*');
      my $pmidAceObjIt2 = $DB->fetch_many(-query=> '*');
      while (my $pmidObj2 = $pmidAceObjIt2->next ) {
	  $cHit++;
	  ($cHit > $MAX_HITS) && last;
	  my @buffer2 = $pmidObj2->Association;
	  push @array, { id => $pmidObj2->name,
			    Title => defined ($pmidObj2->Title) ? $pmidObj2->Title->name : undef,
                   imexID => defined ($pmidObj2->IMEx_ID) ? $pmidObj2->IMEx_ID->name : undef,
                   count => scalar(@buffer2)
		   };
      }
  }

  return \@array;
}

  sub indexingSpecies {
    my $DB = shift;
    $logger->info('Indexing Species');
    my @species = $DB->fetch(Species => '*');
    my $specieHash = {};
    foreach my $specie (@species){
      
      my $eName = $specie->at('English_name');
      if(defined $eName) { $eName = $eName->right();}
      $specieHash->{ $specie->name } = defined ($eName) ? $eName->name : $specie->name;
    }
    return $specieHash;
  }
  
