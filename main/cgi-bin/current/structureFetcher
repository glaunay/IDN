#!/usr/bin/perl

=pod Profiling statements
#!/usr/bin/perl -d:NYTProf
$ENV{'NYTPROF'}="trace=2:start=init:file=/tmp/interactomProf.out";
=cut

use strict;
use vars qw/$DB $URL %EQUIV/;

use warnings;
use diagnostics;

use lib qw(lib/perl);

#from CPAN
use CGI;
use JSON;
use Data::Dumper;
use Log::Log4perl qw(get_logger :levels);
# custom
use common;
use pdbMetaContainer;

Log::Log4perl->init("./conf/structureFetcher.conf");
my $logger = get_logger();


=pod
    Given a pdb identifier returns the json object storing all core related
    information plus the PDB atom records
=cut

$logger->info("*** CGI activation at " . common::getTime());

# retrieving get parameters
my $query = CGI->new();
my %params = $query->Vars;
my $queryData = decode_json($params{'POSTDATA'});
$logger->info("query content:\n" . Dumper($queryData));

my $configuration =  {
    pdbRawRepo => "../../data/molecularData/pdb",
    pdbMetaRepo => "../../data/molecularData/pdd"
};

my $container = {
    atomRecord => '',
    sseArray => [],
    pdbnumArray => [],
    aaSeqArray => [],
    chainidArray => []
};

if(defined($queryData->{ pdbName })) {
    my ($fname) = $queryData->{ pdbName } =~ /^(.{4})/;
    $fname = lc($fname);
    my $fLoc =  $configuration->{ pdbRawRepo } . "/" . $fname . ".pdb";
    if (-e $fLoc) {
	$container->{ atomRecord } = common::fileStringify(fileLoc => $fLoc);    
#	$logger->info($container->{ atomRecord });
    } else {
	$logger->info("No file at $fLoc");
    }
    
    if ($queryData->{ pdbName } =~ /^([\w]{4})(.{1})$/) {
	my $chainid =  uc($2);
	my $coreName = lc($1) . $chainid;
	my $coreFolder = $configuration->{ pdbMetaRepo } . "/" . $queryData->{ pdbName };
	my $pdbMetaObject = pdbMetaContainer->new(CoreName => $coreName,
						  CoreFolder => $configuration->{ pdbMetaRepo } . "/$coreName",
						  CoreDef => "NONE");
	#$logger->trace(Dumper($pdbMetaObject) );
	my $pdbnumList = $pdbMetaObject->get_pdbnum_array();
	my $sseData = $pdbMetaObject->sse_subseq(); 
	my $seqData =  $pdbMetaObject->aa_subseq();	
	push @{ $container->{ pdbnumArray } }, $pdbnumList;
	push @{ $container->{ sseArray } }, $sseData->{ array };
	push @{ $container->{ aaSeqArray } },  $seqData->{ array };
	push @{ $container->{ chainidArray } }, $chainid;
    }        
    elsif ($queryData->{ pdbName } =~ /^([\w]{4})$/) {
	my $coreName = lc($1);
	my $coreFolder = $configuration->{ pdbMetaRepo } . "/$coreName";
	my $chainidList = guessChainidList($coreFolder);
	$logger->trace(Dumper($chainidList));
	foreach my $chainid (@{ $chainidList }) {
	    my $pdbMetaObject = pdbMetaContainer->new(CoreName => "$coreName$chainid",
						      CoreFolder => $configuration->{ pdbMetaRepo } . "/$coreName",
						      CoreDef => "NONE");
	    #$logger->trace(Dumper($pdbMetaObject) );
	    my $pdbnumList = $pdbMetaObject->get_pdbnum_array();
	    my $sseData = $pdbMetaObject->sse_subseq(); 
	    my $seqData =  $pdbMetaObject->aa_subseq();	
	    push @{ $container->{ pdbnumArray } }, $pdbnumList;
	    push @{ $container->{ sseArray } }, $sseData->{ array };
	    push @{ $container->{ aaSeqArray } }, $seqData->{ array };
	    push @{ $container->{ chainidArray } }, $chainid;
	    
	}        
    }
}

$logger->trace("Final Structure Container:\n" . Dumper($container));
$container->{ atomRecord } = chopPastFirstModel($container->{ atomRecord });

my $jsonObject = encode_json($container);

print $query->header('application/json');      # create the HTTP header
print "$jsonObject";

sub chopPastFirstModel {
  my $pdbString = shift;
  my @array;
  my $bRead = 1;
  
  foreach my $line (split ("\n", $pdbString)) {
    if ($line =~ /^MODEL[\s]+([\d]+)/) {
      if ($1 > 1) {$bRead = 0;}
    }
    if ($line =~ /^ENDMDL/) {
      if($bRead) {push @array, $line;}
      $bRead = 1;
      next;
    }
    $bRead || next;
    push @array, $line;
  }
  return join("\n", @array);
}

sub guessChainidList {
    my $folder = shift;

    my $list = common::readDirContent($folder);
    my @chainidList;
    foreach my $item (@{ $list }) {
	if($item =~ /^.{4}(.).fasta/) {
	    push @chainidList, $1;
	}
    }

    return \@chainidList;
}
